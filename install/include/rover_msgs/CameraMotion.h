// Generated by gencpp from file rover_msgs/CameraMotion.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_CAMERAMOTION_H
#define ROVER_MSGS_MESSAGE_CAMERAMOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct CameraMotion_
{
  typedef CameraMotion_<ContainerAllocator> Type;

  CameraMotion_()
    : X_button(false)
    , B_button(false)
    , Y_button(false)
    , A_button(false)  {
    }
  CameraMotion_(const ContainerAllocator& _alloc)
    : X_button(false)
    , B_button(false)
    , Y_button(false)
    , A_button(false)  {
  (void)_alloc;
    }



   typedef uint8_t _X_button_type;
  _X_button_type X_button;

   typedef uint8_t _B_button_type;
  _B_button_type B_button;

   typedef uint8_t _Y_button_type;
  _Y_button_type Y_button;

   typedef uint8_t _A_button_type;
  _A_button_type A_button;




  typedef boost::shared_ptr< ::rover_msgs::CameraMotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::CameraMotion_<ContainerAllocator> const> ConstPtr;

}; // struct CameraMotion_

typedef ::rover_msgs::CameraMotion_<std::allocator<void> > CameraMotion;

typedef boost::shared_ptr< ::rover_msgs::CameraMotion > CameraMotionPtr;
typedef boost::shared_ptr< ::rover_msgs::CameraMotion const> CameraMotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::CameraMotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::CameraMotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rover_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rover_msgs': ['/home/anveshak/rover-control/src/rover_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::CameraMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::CameraMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::CameraMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::CameraMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::CameraMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::CameraMotion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::CameraMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b767c6f7caee821455d285d718340233";
  }

  static const char* value(const ::rover_msgs::CameraMotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb767c6f7caee8214ULL;
  static const uint64_t static_value2 = 0x55d285d718340233ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::CameraMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/CameraMotion";
  }

  static const char* value(const ::rover_msgs::CameraMotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::CameraMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool X_button\n\
bool B_button\n\
bool Y_button\n\
bool A_button\n\
";
  }

  static const char* value(const ::rover_msgs::CameraMotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::CameraMotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X_button);
      stream.next(m.B_button);
      stream.next(m.Y_button);
      stream.next(m.A_button);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraMotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::CameraMotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::CameraMotion_<ContainerAllocator>& v)
  {
    s << indent << "X_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.X_button);
    s << indent << "B_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.B_button);
    s << indent << "Y_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Y_button);
    s << indent << "A_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.A_button);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_CAMERAMOTION_H
